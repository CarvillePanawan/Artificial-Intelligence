package prelims;

import java.util.Scanner;
import java.util.ArrayList;

public class Convoy {
    public static void main(String[] args) {
        try {
            Convoy amazingProgram = new Convoy();
            amazingProgram.run();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    public void run() {
        Scanner sc = new Scanner(System.in);
        int maxLoad = sc.nextInt();
        int bridgeLength = sc.nextInt();
        int totalVehicles = sc.nextInt();
        
        Vehicle[] vehicles = new Vehicle[totalVehicles+1];
        
        for(int i = 0; i < totalVehicles; i++) {
            vehicles[i] = new Vehicle(sc.nextInt(), sc.nextInt());
        }
        vehicles[totalVehicles] = new Vehicle(0, 0);
        
//        solution(maxLoad, bridgeLength, totalVehicles, vehicles);
//        test(maxLoad, bridgeLength, totalVehicles, vehicles);
        testMethod(maxLoad, bridgeLength, totalVehicles, vehicles);
        
        sc.close();
    }
    
    public void test(int maxLoad, int bridgeLength, int totalTrucks, Vehicle[] vehicles) {
        State initialState = new State(vehicles, null);
        ArrayList<State> frontier = new ArrayList<>();
        frontier.add(initialState);

        while(frontier.size() > 0) {
            State currentState = frontier.remove(0);
            
//            if(counter > vehicles.length) {
//                break;
//            }
            
//            Vehicle[] temp = Arrays.copyOfRange(vehicles, counter, vehicles.length);
//            counter++;
//            Vehicle[] temp = shorten(vehicles, maxLoad);
//            vehicles = temp;
            
            ArrayList<State> successorStates = currentState.expand(vehicles, maxLoad);
            frontier.addAll(successorStates);
            
            Vehicle[] temp = shorten(vehicles, maxLoad);
            vehicles = temp;
            
            for(int i = 0; i < successorStates.size(); i++) {
                successorStates.get(i).showVehicles();
            }
            System.out.println();
        }
    }
    
    public void testMethod(int maxLoad, int bridgeLength, int totalTrucks, Vehicle[] vehicles) {
        Vehicle[] x = shorten(vehicles, maxLoad);
        
        System.out.println(x.length);
        
        for(int i = 0; i < x.length; i++) {
            System.out.println(x[i].toString());
        }
    }
    
    public Vehicle[] shorten(Vehicle[] a, int maxLoad) {
        int counter = 0;
        int bufferWeight = 0;
        
        while(counter < a.length) {
            bufferWeight += a[counter].getWeight();
            
            if(bufferWeight > maxLoad) {
                break;
            }
            
            counter++;
        }

        Vehicle[] x = new Vehicle[a.length-counter];
        for(int i = 0; i < x.length; i++) {
            x[i] = a[counter];
            counter++;
        }
        
        return x;
    }
    
    public void solution(int maxLoad, int bridgeLength, int totalTrucks, Vehicle[] vehicles) {
        State initialState = new State(vehicles, null);
        
        ArrayList<State> frontier = new ArrayList<>();
        frontier.add(initialState);
        
        int totalStatesVisited = 0;
        int maxFrontierSize = 1;
        
        while(frontier.size() > 0) {
            State currentState = frontier.remove(0);
            
            totalStatesVisited++;
            
            if(currentState.isGoal()) {
                showSolution(currentState, totalStatesVisited, maxFrontierSize);
                return;
            } else {
                ArrayList<State> successorStates = currentState.expand(vehicles, maxLoad);
                frontier.addAll(successorStates);
                
                Vehicle[] temp = shorten(vehicles, maxLoad);
                vehicles = temp;
                
                maxFrontierSize = Math.max(maxFrontierSize, frontier.size());              
            }
        }
        
        System.out.println("No Solution");
    }
    
    public void showSolution(State state, int totalStatesVisited, int maxFrontierSize) {
        ArrayList<State> path = new ArrayList<>();

        while (state != null) {
            path.add(0, state);
            state = state.getParent();
        }

        System.out.println("Solution:");
        for (State st : path) {
            st.showVehicles();
        }

        System.out.println("Total States Visited: "+ totalStatesVisited);
        System.out.println("Maximum Size of Frontier: "+ maxFrontierSize);
    }
}

--

package prelims;

import java.util.Scanner;
import java.util.ArrayList;

public class Convoy {
    public static void main(String[] args) {
        try {
            Convoy amazingProgram = new Convoy();
            amazingProgram.run();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    public void run() {
        Scanner sc = new Scanner(System.in);
        int maxLoad = sc.nextInt();
        int bridgeLength = sc.nextInt();
        int totalVehicles = sc.nextInt();
        
        Vehicle[] vehicles = new Vehicle[totalVehicles+1];
        
        for(int i = 0; i < totalVehicles; i++) {
            vehicles[i] = new Vehicle(sc.nextInt(), sc.nextInt());
        }
        vehicles[totalVehicles] = new Vehicle(0, 0);
        
        solution(maxLoad, bridgeLength, totalVehicles, vehicles);
        
        sc.close();
    }
    
    public void test(int maxLoad, int bridgeLength, int totalTrucks, Vehicle[] vehicles) {
        State initialState = new State(vehicles, null);
        ArrayList<State> frontier = new ArrayList<>();
        frontier.add(initialState);

        System.out.println("Search Tree");
        while(frontier.size() > 0) {
            State currentState = frontier.remove(0);
            
            ArrayList<State> successorStates = currentState.expand(vehicles, maxLoad);
            frontier.addAll(successorStates);
            
            Vehicle[] temp = shorten(vehicles, maxLoad);
            vehicles = temp;
            
            for(int i = 0; i < successorStates.size(); i++) {
                successorStates.get(i).showVehicles();
            }
            System.out.println();
        }
    }
    
    public Vehicle[] shorten(Vehicle[] a, int maxLoad) {
        int counter = 0;
        int bufferWeight = 0;
        int tempWeight = 0;
        
        while(counter < a.length) {
            tempWeight += bufferWeight + a[counter].getWeight();
            
            if(tempWeight >= maxLoad) {
                break;
            } else {
                bufferWeight += a[counter].getWeight();
                counter++;
            }
        }

        Vehicle[] x = new Vehicle[a.length-counter];
        for(int i = 0; i < x.length; i++) {
            x[i] = a[counter];
            counter++;
        }
        
        return x;
    }
    
    public void solution(int maxLoad, int bridgeLength, int totalTrucks, Vehicle[] vehicles) {
        State initialState = new State(vehicles, null);
        
        ArrayList<State> frontier = new ArrayList<>();
        frontier.add(initialState);
        
        int totalStatesVisited = 0;
        int maxFrontierSize = 1;
        
        while(frontier.size() > 0) {
            State currentState = frontier.remove(0);
            
            totalStatesVisited++;
            
            if(currentState.isGoal()) {
                showSolution(currentState, totalStatesVisited, maxFrontierSize);
                return;
            } else {
                ArrayList<State> successorStates = currentState.expand(vehicles, maxLoad);
                frontier.addAll(0 ,successorStates);
                
                Vehicle[] temp = shorten(vehicles, maxLoad);
                vehicles = temp;
                
                maxFrontierSize = Math.max(maxFrontierSize, frontier.size());              
            }
        }
        
        System.out.println("No Solution");
    }
    
    public void showSolution(State state, int totalStatesVisited, int maxFrontierSize) {
        ArrayList<State> path = new ArrayList<>();

        while (state != null) {
            path.add(0, state);
            state = state.getParent();
        }

        System.out.println("Solution:");
        for (State st : path) {
            st.showVehicles();
        }

        System.out.println("Total States Visited: "+ totalStatesVisited);
        System.out.println("Maximum Size of Frontier: "+ maxFrontierSize);
        System.out.println();
    }
}

